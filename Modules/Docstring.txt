NAME
    Modules.AI

DESCRIPTION
    This is the AnalyseInformation for the TRYBOT
    The purpose of this module is to serve as the piazza post analyzer i.e "interpret" the posts content

CLASSES
    builtins.object
        AI
    
    class AI(builtins.object)
     |  :type dust: Dust()-object
     |      :param The module that this module sends data to
     |  :type ass: Ass()-object
     |      :param The module that this module send data to
     |  :type Fint: Fint()-object
     |      :param The module used for fetching content from Piazza
     |  :type has_data: Boolean
     |      :param Tells if there is any data to be processed
     |  :type has_unsent_data: Boolean
     |      :param Tells if there is any processed data that has not been sent yet
     |  :type posts: List
     |      :param Data to be processed
     |  :type unsent_data: String
     |      :param Holds unsent processed data
     |  
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Init all stop_words ie words to be removed from the piazza post
     |  
     |  analyse(self)
     |      Strips the content from all unnecessary things and derives keywords from the content
     |  
     |  fetch_piazza(self, test=False)
     |      Fetches content from piazza
     |      :type test: Str/Int
     |          :param test: used for fetching a precise post, mostly used for testing
     |  
     |  loop(self)
     |      This method is used by main to determine if main should stop the main loop
     |      checks if self.unsent_data is empty (stack) if yes, return True else None
     |  
     |  run(self, fetch_new_data=False)
     |      Predefined run function that all modules used in cross-communication has, main uses this
     |      
     |      :type fetch_new_data: Boolean
     |          :param fetch_new_data: Used to tell this module if it should fetch new posts from piazza
     |  
     |  send_data(self)
     |      This methods is used to send data to the other modules
     |  
     |  set_ass(self, ass)
     |      :type ass: Ass()-object
     |          :param ass:  Sends data to this module
     |  
     |  set_dust(self, dust)
     |      :type dust: Dust()-object
     |          :param dust: Sends data to this module
     |  
     |  set_fint(self, fint)
     |      :type fint: Fint()-object
     |          :param fint:  Uses this Interface to fetch content from Piazza
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  ass = None
     |  
     |  dust = None
     |  
     |  fint = None
     |  
     |  has_data = False
     |  
     |  has_unsent_data = False
     |  
     |  posts = []
     |  
     |  unsent_data = []



NAME
    Modules.Ass2

DESCRIPTION
    This is the AccessStoredSolutions for the TRYBOT
    The purpose of this module is to fetch stored data from the database

CLASSES
    builtins.object
        Ass
    
    class Ass(builtins.object)
     |  :type has_data: Boolean
     |      :param Tells if there is any data to be processed
     |  :type data: List
     |      :param [piazzaid, dict(keywords: priority)] this is data to be processed
     |  :type has_unsent_data: Boolean
     |      :param Tells if there is any processed data that has not been sent yet
     |  :type unsent_data: String
     |      :param Holds unsent processed data
     |  :type pms: PMS()-object
     |      :param The module that this module send its data to
     |  :type mint: Mint()-object
     |      :param The module used for performing queries to the database and getting the highest match
     |  
     |  Methods defined here:
     |  
     |  get_highest_id(self)
     |      Uses Mint module to get the highest piazza post ID
     |  
     |  run(self)
     |      Predefined run function that all modules used in cross-communication has, main uses this
     |  
     |  set_data(self, data)
     |      Receives data from other modules
     |      
     |      :type data: List
     |          :param data: (piazzaId, dict(keywords : priority))
     |  
     |  set_mint(self, mint)
     |      :type mint: Mint()-object
     |          :param mint: Sends data to this module
     |  
     |  set_pms(self, pms)
     |      :type pms: PMS()-object
     |          :param pms: Sends data to this module
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  data = None
     |  
     |  has_data = False
     |  
     |  has_unsent_data = False
     |  
     |  mint = None
     |  
     |  pms = None
     |  
     |  unsent_data = None



NAME
    Modules.Dust

DESCRIPTION
    This is the DatabaseUpdateSolutionTable for the TRYBOT
    The purpose of this module is to update the database table

CLASSES
    builtins.object
        Dust
    
    class Dust(builtins.object)
     |  :type has_data: Boolean
     |      :param has_data: Boolean to determine if it has data or not
     |  :type has_unsent_data: Boolean
     |      :param has_unsent_data: bool to determine if it has unsent processed data
     |  :type unsent_data: List
     |      :param unsent_data: [piazzaid, dict(keywords: priority)] this is set if first update fails
     |  :type data: List
     |      :param data: [piazzaid, dict(keywords: priority)]
     |  :type mint: Mint()-object
     |      :param mint: the interface used to update/append new keywords
     |  
     |  Methods defined here:
     |  
     |  process_data(self)
     |      Loops through the dictionary and attempts to update the database with the tulpes. For each successful update
     |       it adds +1 to the variable successful, this variable is used by run()
     |  
     |  run(self)
     |      Predefined run function that all modules used in cross-communication has, main uses this
     |  
     |  set_data(self, data)
     |      :type data: List
     |      :param data: [piazzaid, dict(keywords: priority)]
     |  
     |  set_mint(self, mint)
     |      :type mint: Mint()-object
     |          :param mint: used for communicating with the database
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  Mint = None
     |  
     |  data = None
     |  
     |  has_data = False
     |  
     |  has_unsent_data = False
     |  
     |  unsent_data = None



NAME
    Modules.Fint

DESCRIPTION
    This is the ForumINTerface for the TRYBOT
    The purpose of this module is to serve as an interface between the Bot and the Forum Piazza.

CLASSES
    builtins.object
        Fint
    
    class Fint(builtins.object)
     |  Methods defined here:
     |  
     |  __init__(self)
     |      Creates a Piazza_api.Piazza to be used by the other functions
     |  
     |  answer(self, cid, content)
     |      Posts a followup on Piazza
     |      
     |      :type: cid: int
     |          :param: cid: post ID
     |      :type: content: string
     |          :param: content: content of the followup
     |  
     |  setup_connection(self, email, password, class_code)
     |      Sets up a connection to piazza and the desired course
     |      
     |      :type  email: str
     |          :param email: The email used for connection
     |      :type  password: str
     |          :param password: The password used for connection
     |      :type  class_code: str
     |          :param class_code: The class' code, found at the end of its URL
     |              Ex: https://piazza.com/class/(HERE IS THE CLASS CODE)
     |  
     |  update(self, start_cid='0', cid=None)
     |      Goes through the Piazza posts, and if cid is declared, goes through only the specified post
     |      
     |      :type: cid: int
     |          :param: cid: Post ID
     |      :type: start_cid: int
     |          :param: start_cid: Update all posts with ID higher than start_cid
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)



NAME
    Modules.Mint2

DESCRIPTION
    This is the MysqlINTerface for the TRYBOT
    The purpose of this module is to serve as the piazza post analyzer i.e "interpret" the posts content

CLASSES
    builtins.object
        Mint
    
    class Mint(builtins.object)
     |  :type treshold: int
     |      :param Int value determines the lower limit of the sum(priority) of the answers
     |  :type host: str
     |      :param  Host name/ IP
     |  :type user: str
     |      :param Username used to connect to the database
     |  :type pw: str
     |      :param Password used to connect to the database
     |  :type db: str
     |      :param name of the database
     |  
     |  Methods defined here:
     |  
     |  add_keyword(self, word=<class 'str'>, priority=<class 'str'>, piazzaid=<class 'str'>)
     |      Adds a keyword to the keyword table in the database
     |      
     |      :type word: str
     |          :param word: The keyword to add
     |      :type priority: str
     |          :param priority: The keyword's priority
     |      :type piazzaid: str
     |          :param piazzaid: The keyword's piazza id
     |  
     |  connect(self, host, user, password, db)
     |  
     |  get_highest_id(self)
     |      Fetches the highest post number and returns this
     |  
     |  get_highest_pri(self, search_list)
     |      Fetches the answer with highest count of words + prioirty sum
     |      
     |      :type search_liste: dict
     |          :param search_liste: a dictionary containing keywords + priority, only keywords are needed here
     |  
     |  set_connection(self, host, user, pw, db)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  db = ''
     |  
     |  host = ''
     |  
     |  pw = ''
     |  
     |  threshold = 80
     |  
     |  user = ''



NAME
    Modules.PMS

DESCRIPTION
    This is the PostMachineSolution for the TRYBOT
    The purpose of this module is to post the answer received from Ass() to piazza

CLASSES
    builtins.object
        PMS
    
    class PMS(builtins.object)
     |  :type current_post: int
     |      :param the that it is currently on, i.e the post to be answered also used to check for answering several times
     |  :type data: int
     |      :param the answer post, i.e the answer to the current post
     |  :type has_data: Boolean
     |      :param tells if PMS has data to be "processed"
     |  :type fint: Fint()-object
     |      :param Interface used to post on piazza
     |  :type has_unsent_data: Boolean
     |      :param this is set if the first attempt at answering fails
     |  
     |  Methods defined here:
     |  
     |  run(self)
     |      Predefined run function that all modules used in cross-communication has, main uses this
     |  
     |  set_data(self, current_post, answer_post)
     |      receive data from Ass module
     |      
     |      :type current_post: int
     |          :param current_post: post Id of the question i.e the post that the answer_post is for
     |      :type answer_post: int
     |          :param answer_post:  answer post, i.e answer to the current_post
     |  
     |  set_fint(self, fint)
     |      :type fint: Fint()-object
     |          :param fint:  Interface used to post on piazza
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  current_post = None
     |  
     |  data = None
     |  
     |  fint = None
     |  
     |  has_data = False
     |  
     |  has_unsent_data = False

